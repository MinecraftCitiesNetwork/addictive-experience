import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java' apply true
    id 'com.github.johnrengelman.shadow' apply true
}

var relocationBase = "com.github.md5sha256.addictiveexperience.shaded"

repositories {
    maven {
        name = "sonatype-snapshots"
        url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        name = "jitpack"
        url = uri("https://jitpack.io")
        content {
            includeModule("com.github.MilkBowl", "VaultAPI")
            includeModule("com.github.Phoenix616", "InventoryGui")
        }
    }
    maven {
        name = "incendo-repo"
        url = uri("https://repo.incendo.org/content/repositories/snapshots")
    }
}

dependencies {

    implementation project(":api")

    implementation("net.kyori:adventure-text-minimessage:4.1.0-SNAPSHOT") {
        exclude(group: "net.kyori", module: "adventure-api")
    }
    implementation('net.kyori:adventure-text-serializer-plain:4.9.2') {
        exclude(group: "net.kyori", "module": "adventure-api")
    }

    implementation("io.papermc:paperlib:1.0.6")
    implementation('org.spongepowered:configurate-yaml:4.1.2')
    implementation('org.spongepowered:configurate-gson:4.1.2')
    implementation('com.github.Phoenix616:InventoryGui:639860fee')
    implementation("com.github.md5sha256:spigot-utils:0.1.0")
    implementation('cloud.commandframework:cloud-paper:1.5.0')
    implementation('cloud.commandframework:cloud-minecraft-extras:1.5.0')
    implementation('cloud.commandframework:cloud-annotations:1.5.0')

    compileOnly("io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT")
    compileOnly('org.jetbrains:annotations:22.0.0')


    implementation("com.google.inject:guice:5.0.1")
    implementation("com.google.inject.extensions:guice-assistedinject:5.0.1") {
        exclude(group: "com.google.inject", module: "guice")
    }

    compileOnly("com.github.MilkBowl:VaultAPI:1.7")

    testCompileOnly('org.junit.jupiter:junit-jupiter-api:5.8.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.1')
    testImplementation("com.github.seeseemelk:MockBukkit-v1.17:1.10.1")
    testImplementation(testFixtures(project(":api")))
}

processResources {
    filesMatching("plugin.yml") {
        filter(tokens: [version: project.version], ReplaceTokens)
    }
}

jar {
    archiveBaseName.set("addictive-experience")
    classifier("implementation")
    dependsOn processResources
}

shadowJar {
    archiveBaseName.set("addictive-experience")
    classifier("")

    dependencies {
        exclude(dependency("com.google.guava:guava:30.1-jre"))
        exclude(dependency("com.google.errorprone:error_prone_annotations:2.3.4"))
        exclude(dependency("com.google.code.gson:gson:2.8.0"))
        exclude(dependency("net.kyori:adventure-api:4.9.2"))
        exclude(dependency("net.kyori:adventure-key:4.9.2"))
        exclude(dependency("net.kyori:adventure-bom:4.9.2"))
        exclude(dependency("net.kyori:examination-api:1.1.0"))
        exclude(dependency("net.kyori:examination-string:1.1.0"))
    }

    relocate("com.github.md5sha256.spigotutils", "${relocationBase}.spigotutils")
    relocate("com.google.inject", "${relocationBase}.inject")
    relocate("cloud.commandframework", "${relocationBase}.cloud")
    relocate("de.themoep.inventorygui", "${relocationBase}.inventorygui")
    relocate("io.leangen.geantyref", "${relocationBase}.geantyref")
    relocate("io.papermc.lib", "${relocationBase}.paperlib")
    relocate("net.kyori.adventure.text.minimessage", "${relocationBase}.text.minimessage")
    relocate("net.kyori.adventure.text.serializer.plain", "${relocationBase}.text.serializer.plain")
    relocate("org.aopalliance", "${relocationBase}.aopalliance")
    relocate("org.spongepowered.configurate", "${relocationBase}.configurate")
    relocate("org.checkerframework", "${relocationBase}.checkerframework")
    relocate("org.yaml.snakeyaml", "${relocationBase}.snakeyaml")
    relocate("javax.inject", "${relocationBase}.javax.inject")
    relocate("javax.annotation", "${relocationBase}.javax.annotation")

    minimize()
}

assemble {
    dependsOn(shadowJar)
}

test {
    useJUnitPlatform()
}

